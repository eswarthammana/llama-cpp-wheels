name: Build and Publish Wheels

on:
  workflow_dispatch:
    inputs:
      llama_cpp_version:
        description: 'Full llama-cpp-python version (e.g., v0.3.4-cu121)'
        required: true
      publish_release:
        description: "Upload wheels to GitHub Release"
        required: false
        default: "true"

permissions:
  contents: write

jobs:
  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            cibw_arch: auto
            manylinux_image: manylinux2014

          - os: ubuntu-latest
            platform: linux
            arch: aarch64
            cibw_arch: aarch64
            manylinux_image: manylinux2014

          - os: macos-latest
            platform: macos
            arch: universal2
            cibw_arch: universal2

          # - os: windows-latest
          #   platform: windows
          #   arch: AMD64
          #   cibw_arch: auto

    steps:
      - name: Set up QEMU (for ARM64)
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Python 3.12.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.9'

      - name: Checkout llama-cpp-python
        uses: actions/checkout@v4
        with:
          repository: abetlen/llama-cpp-python
          ref: ${{ inputs.llama_cpp_version }}
          submodules: true

      - name: Extract base tag
        id: extract_tag
        shell: bash
        run: |
          TAG="${{ inputs.llama_cpp_version }}"
          BASE_TAG="${TAG%-*}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "base_tag=$BASE_TAG" >> "$GITHUB_OUTPUT"

      - name: Install system dependencies (Linux only)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y cmake build-essential python3-dev libopenblas-dev patchelf

      - name: Install cibuildwheel
        shell: bash
        run: pip install cibuildwheel

      - name: Build wheels with cibuildwheel
        shell: bash
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_ENVIRONMENT: >-
            CMAKE_ARGS="-DCMAKE_INSTALL_LIBDIR=llama_cpp -DLLAMA_CUBLAS=OFF -DLLAMA_METAL=OFF -DLLAMA_OPENBLAS=ON -DLLAMA_NATIVE=OFF -DCMAKE_CXX_STANDARD=11 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15"
          CIBW_SKIP: pp* *musllinux* *-win32
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_AARCH64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_REPAIR_WHEEL_COMMAND: >
            mkdir -p {dest_dir}/llama_cpp/.libs &&
            cp /project/llama_cpp/lib/*.so {dest_dir}/llama_cpp/.libs &&
            echo "Contents of .libs:" &&
            ls -al {dest_dir}/llama_cpp/.libs &&
            auditwheel repair -w {dest_dir} {wheel} || (
              echo "⚠️ auditwheel failed, copying original wheel..." &&
              cp {wheel} {dest_dir}
            )
        run: |
          python3 -m cibuildwheel --output-dir dist

      - name: Upload built wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: llama-wheels-${{ matrix.os }}-${{ matrix.arch }}-py${{ matrix.python-version }}
          path: dist/*.whl

  release:
    name: Release to GitHub
    needs: build_wheels
    if: ${{ github.event.inputs.publish_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_wheels

      - name: Publish wheels to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          files: all_wheels/**/*.whl
          token: ${{ secrets.GH_PAT }}
