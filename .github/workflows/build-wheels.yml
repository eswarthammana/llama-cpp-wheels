name: Build CPU Wheels

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Git tag or commit to build from"
        required: true
      publish_release:
        description: "Publish wheels to GitHub Release?"
        required: true
        default: "false"

jobs:
  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64

          - os: ubuntu-latest
            platform: linux
            arch: aarch64

          - os: macos-latest
            platform: macos
            arch: universal2

          - os: windows-latest
            platform: windows
            arch: AMD64

    steps:
      - name: Set up QEMU (for ARM64)
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.9'

      - name: Install Build Tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake python3-dev libopenblas-dev patchelf

      - name: Install Build Tools (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Build Tools (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake openblas

      - name: Build wheels for Python 3.8 to 3.12
        shell: bash
        run: |
          PY_VERSIONS="3.8 3.9 3.10 3.11 3.12"
          mkdir -p repaired_wheels
          for PYVER in $PY_VERSIONS; do
            echo "Installing Python $PYVER"
            pyenv install -s $PYVER
            pyenv local $PYVER
            python -m pip install -U pip build
            python -m build --wheel --outdir temp_dist/
            mv temp_dist/*.whl repaired_wheels/
          done

      - name: Upload built wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llama-wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: repaired_wheels/*.whl

  release:
    name: Release to GitHub
    needs: build_wheels
    if: ${{ github.event.inputs.publish_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_wheels

      - name: Publish wheels to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          files: all_wheels/**/*.whl
